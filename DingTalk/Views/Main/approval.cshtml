@{
    Layout = null;
}

<!--右侧实体内容-->
<el-main id="partPage" style="margin-top:20px;">
    <br />
    <template v-if="userName == '蔡兴桐' || userName == '黄浩炜' || userName == '詹姆斯' || userName == '黄浩伟' || userName == '黄龙贤' || userName == '胡晓辉' || userName == '林淑珍' || userName == '徐丽华' || userName == '陈思扬'|| userName == '许瑜瑜'">
        <span>我是：</span>
        <el-select v-model="userName" v-on:change="selectUser" filterable placeholder="请选择">
            <el-option v-for="item in userList"
                       :key="item.PeopleId"
                       :label="item.NodePeople"
                       :value="item.PeopleId">
            </el-option>
        </el-select>
        <p>{{name}}</p>
        <p>{{id}}</p>
        <el-button class="button-new-tag" size="small" v-on:click="addMemberTest()">+ 选人</el-button>
        @*<el-button class="button-new-tag" size="small" v-on:click="test">钉盘</el-button>*@
    </template>


    <!--test   -->
    @*<div class="fd-nav-content" v-if="show">
        <section class="dingflow-design">
            <div class="zoom">
                <div :class="'zoom-out'+ (nowVal==50?' disabled':'')" v-on:click="zoomSize(1)"></div>
                <span>{{nowVal}}%</span>
                <div :class="'zoom-in'+ (nowVal==300?' disabled':'')" v-on:click="zoomSize(2)"></div>
            </div>
            <div class="box-scale" id="box-scale" :style="'transform: scale('+nowVal/100+'); transform-origin: 50% 0px 0px;'">
                <nodewrap :nodeconfig.sync="nodeconfig" :flowpermission.sync="flowpermission"
                          :istried.sync="istried" :directormaxlevel="directormaxlevel" :tableid="tableid"></nodewrap>
                <div class="end-node">
                    <div class="end-node-circle"></div>
                    <div class="end-node-text">流程结束</div>
                </div>
            </div>
        </section>
    </div>*@

    <el-collapse v-model="activeNames">
        <el-collapse-item v-for="(m,i) in menu" :name="i+1" :key="i" v-if="m.flows.length > 0">
            <template slot="title">
                <span style="font-size:20px;">{{m.SORT_NAME}}</span>
            </template>
            <div v-for="l in m.flows" v-if="l.PcUrl" class="approval-box" v-on:click="toApprove(l.PcUrl,l)" style="cursor:pointer;">
                <div class="approval-box-img" :style="{backgroundPosition:l.Position}"></div>
                <p>{{l.FlowName}}</p>
            </div>
        </el-collapse-item>
    </el-collapse>
</el-main>

<script>
    let jsonData = {
        "code": "200",
        "msg": "success",
        "data": {
            "tableid": 1,
            "workFlowVersionId": "",
            "workFlowDef": {
                "name": "合同审批",
                "publicFlag": 1,
                "sortNo": 5,
                "duplicateRemovelFlag": 1,
                "optionTip": "",
                "optionNotNull": 0,
                "status": 1
            },
            "directormaxlevel": 4,
            "flowpermission": [],
            "nodeconfig": {
                "pkId": "sid-start-node",
                "nodeName": "发起人",
                "type": 0,
                "priorityLevel": "",
                "settype": "",
                "selectMode": "",
                "selectRange": "",
                "examineRoleId": "",
                "directorLevel": "",
                "replaceByUp": "",
                "examineMode": "",
                "noHanderAction": "",
                "examineEndType": "",
                "examineEndRoleId": "",
                "examineEndDirectorLevel": "",
                "ccSelfSelectFlag": "",
                "conditionList": [],
                "nodeUserList": [],
                "childNode": {
                    "nodeName": "审核人",
                    "error": false,
                    "type": 1,
                    "settype": 2,
                    "selectMode": 0,
                    "selectRange": 0,
                    "directorLevel": 1,
                    "replaceByUp": 0,
                    "examineMode": 1,
                    "noHanderAction": 2,
                    "examineEndDirectorLevel": 0,
                    "childNode": {
                        "nodeName": "路由",
                        "type": 4,
                        "priorityLevel": 1,
                        "settype": 1,
                        "selectMode": 0,
                        "selectRange": 0,
                        "examineRoleId": 0,
                        "directorLevel": 1,
                        "replaceByUp": 0,
                        "examineMode": 1,
                        "noHanderAction": 2,
                        "examineEndType": 0,
                        "examineEndRoleId": 0,
                        "examineEndDirectorLevel": 1,
                        "ccSelfSelectFlag": 1,
                        "conditionList": [],
                        "nodeUserList": [],
                        "childNode": {
                            "nodeName": "抄送人",
                            "type": 2,
                            "ccSelfSelectFlag": 1,
                            "childNode": null,
                            "nodeUserList": [],
                            "error": false
                        },
                        "conditionNodes": [{
                            "nodeName": "条件1",
                            "type": 3,
                            "priorityLevel": 1,
                            "settype": 1,
                            "selectMode": 0,
                            "selectRange": 0,
                            "examineRoleId": 0,
                            "directorLevel": 1,
                            "replaceByUp": 0,
                            "examineMode": 1,
                            "noHanderAction": 2,
                            "examineEndType": 0,
                            "examineEndRoleId": 0,
                            "examineEndDirectorLevel": 1,
                            "ccSelfSelectFlag": 1,
                            "conditionList": [{
                                "columnId": 0,
                                "type": 1,
                                "conditionEn": "",
                                "conditionCn": "",
                                "optType": "",
                                "zdy1": "",
                                "zdy2": "",
                                "opt1": "",
                                "opt2": "",
                                "columnDbname": "",
                                "columnType": "",
                                "showType": "",
                                "showName": "",
                                "fixedDownBoxValue": ""
                            }],
                            "nodeUserList": [{
                                "targetId": 85,
                                "type": 1,
                                "name": "天旭"
                            }],
                            "childNode": {
                                "nodeName": "审核人",
                                "type": 1,
                                "priorityLevel": 1,
                                "settype": 1,
                                "selectMode": 0,
                                "selectRange": 0,
                                "examineRoleId": 0,
                                "directorLevel": 1,
                                "replaceByUp": 0,
                                "examineMode": 1,
                                "noHanderAction": 2,
                                "examineEndType": 0,
                                "examineEndRoleId": 0,
                                "examineEndDirectorLevel": 1,
                                "ccSelfSelectFlag": 1,
                                "conditionList": [],
                                "nodeUserList": [{
                                    "targetId": 2515744,
                                    "type": 1,
                                    "name": "哈哈哈哈"
                                }],
                                "childNode": null,
                                "conditionNodes": [],
                                "error": false
                            },
                            "conditionNodes": [],
                            "error": false
                        }, {
                            "nodeName": "条件2",
                            "type": 3,
                            "priorityLevel": 2,
                            "settype": 1,
                            "selectMode": 0,
                            "selectRange": 0,
                            "examineRoleId": 0,
                            "directorLevel": 1,
                            "replaceByUp": 0,
                            "examineMode": 1,
                            "noHanderAction": 2,
                            "examineEndType": 0,
                            "examineEndRoleId": 0,
                            "examineEndDirectorLevel": 1,
                            "ccSelfSelectFlag": 1,
                            "conditionList": [],
                            "nodeUserList": [],
                            "childNode": null,
                            "conditionNodes": [],
                            "error": false
                        }]
                    },
                    "nodeUserList": []
                },
                "conditionNodes": []
            }


        }
    }
    var demo = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                show:false,
                istried: false,
                tipList: [],
                tipVisible: false,
                nowVal: 100,
                processConfig: {},
                nodeconfig: {},

                workFlowDef: {},
                flowpermission: [],
                directormaxlevel: 0,
                dialogVisible: true,
                tableid: "",


                activeNames: [1,2,3,7],
                count: 2,
                name: '',
                id: '',
                list: [],
                userList: userList,
                userName: DingData.nickName
            }
        },
        methods: {
            test: function () {
                dd.biz.util.uploadAttachment({
                    image: { multiple: true, compress: false, max: 9, spaceId: "2194424840" },
                    space: { corpId: DingData.CorpId, spaceId: "2194424840", isCopy: 1, max: 9 },
                    file: { spaceId: "2194424840", max: 1 },
                    types: ["photo", "file", "space"],//PC端支持["photo","file","space"]
                    onSuccess: function (result) {
                        console.log(JSON.stringify(result))
                    },
                    onFail: function (err) { }
                });
            },
            getMenu: function () {
                this.GetData('FlowInfoNew/LoadFlowSort?DEPT_ID=ALL&userid=' + DingData.userid, (res) => {
                    res = JSON.stringify(res).replace(/null/g, '""')
                    this.menu = JSON.parse(res)
                    menu = JSON.parse(res)
                })
            },
            filterMenuList() {
                var that = this
                var url = '/Role/GetRoleInfo?RoleName=研究院官网维护人员' 
                $.ajax({
                    url: url,
                    success: function (data) {
                        console.log(data)
                        let isRole = false
                        for (let d of data) {
                            console.log(d)
                            if (d.emplId == DingData.userid) {
                                isRole = true
                                break
                            }
                        }
                        if (!isRole) {
                            for (var i = 0; i < that.menu.length; i++) {
                                if (that.menu[i].SORT_NAME == '研究院官网管理') {
                                    that.menu.splice(i, 1)
                                }
                            }
                        }
                    }
                })
                var url2 = '/Role/GetRoleInfo?RoleName=项目管理员'
                $.ajax({
                    url: url2,
                    success: function (data) {
                        console.log(data)
                        let isRole = false
                        for (let d of data) {
                            console.log(d)
                            if (d.emplId == DingData.userid) {
                                isRole = true
                                break
                            }
                        }
                        if (!isRole) {
                            for (var i = 0; i < that.list.length; i++) {
                                if (that.list[i].FlowId == 11 && that.userName != '黄浩炜') {
                                    that.list.splice(i, 1)
                                }
                            }
                        }
                    }
                })
            },
            addMemberTest() {
                var that = this

                DingTalkPC.biz.contact.choose({
                    users: [], //默认选中的用户列表，员工userid；成功回调中应包含该信息
                    corpId: DingData.CorpId, //企业id
                    max: 10, //人数限制，当multiple为true才生效，可选范围1-1500
                    onSuccess: function (data) {
                        console.log(data)
                        that.name = data[0].name
                        that.id = data[0].emplId
                        DingData.userid = data[0].emplId
                        DingData.nickName = data[0].name

                        $.ajax({
                            url: '/DingTalkServers/getUserDetail?userId=' + DingData.userid,
                            dataType: 'json',
                            type: 'POST',
                            data: {},
                            contentType: "application/json; charset=utf-8",
                            success: function (data) {
                                if (typeof (data) == 'string') data = JSON.parse(data)
                                DingData.nickName = data.name
                                DingData.department = data.department
                                DingData.dept = data.dept
                            },
                            error: function (err) {
                                console.error(err)
                            }
                        })
                    },
                    onFail: function (err) { }
                });
            },
            toApprove: function (url, param) {
                FlowId = param.FlowId
                FlowName = param.FlowName
                loadPage(url)
            },
            loadPage: function (url) {
                $("#tempPage").load(url)
            },
            selectUser: function (id) {
                console.log(id)
                for (var user of this.userList) {
                    if (user.PeopleId == id) {
                        DingData.userid = user.PeopleId
                        DingData.nickName = user.NodePeople
                    }
                }
            },
            getUserInfo: function () {
                this.GetData("FlowInfoNew/GetUserInfo", (res) => {
                    this.userList = res
                })
            },



            toReturn() {
                //window.location.href = ""
            },
            reErr(data) {
                if (data.childNode) {
                    if (data.childNode.type == 1) {//审批人
                        if (data.childNode.error) {
                            this.tipList.push({ name: data.childNode.nodeName, type: "审核人" })
                        }
                        this.reErr(data.childNode)
                    } else if (data.childNode.type == 2) {
                        if (data.childNode.error) {
                            this.tipList.push({ name: data.childNode.nodeName, type: "抄送人" })
                        }
                        this.reErr(data.childNode)
                    } else if (data.childNode.type == 3) {
                        this.reErr(data.childNode.childNode)
                    } else if (data.childNode.type == 4) {
                        this.reErr(data.childNode)
                        for (var i = 0; i < data.childNode.conditionNodes.length; i++) {
                            if (data.childNode.conditionNodes[i].error) {
                                this.tipList.push({ name: data.childNode.conditionNodes[i].nodeName, type: "条件" })
                            }
                            this.reErr(data.childNode.conditionNodes[i])
                        }
                    }
                } else {
                    data.childNode = null
                }
            },
            saveSet() {
                this.istried = true;
                this.tipList = [];
                this.reErr(this.nodeconfig);
                if (this.tipList.length != 0) {
                    this.tipVisible = true;
                    return;
                }
                this.processConfig.flowpermission = this.flowpermission
                console.log(JSON.stringify(this.processConfig))
                // this.$axios.post("", this.processConfig).then(res => {
                //     if (res.code == 200) {
                //         this.$message.success("设置成功");
                //         setTimeout(function () {
                //             window.location.href = ""
                //         }, 200)
                //     }
                // })
            },
            zoomSize(type) {
                if (type == 1) {
                    if (this.nowVal == 50) {
                        return;
                    }
                    this.nowVal -= 10;
                } else {
                    if (this.nowVal == 300) {
                        return;
                    }
                    this.nowVal += 10;
                }
            }
        },
        created: function () {
            
            //this.processConfig = jsonData.data;
            //this.nodeconfig = this.processConfig.nodeconfig;
            //this.flowpermission = this.processConfig.flowpermission;
            //this.directormaxlevel = this.processConfig.directormaxlevel;
            //this.workFlowDef = this.processConfig.workFlowDef
            //this.tableid = this.processConfig.tableid
            //this.show = true
            //console.warn('hello?')
            //console.log(this.nodeconfig)
            //console.log(this.flowpermission)
            //console.log(this.directormaxlevel)
            //console.log(this.workFlowDef )
            //console.log(this.tableid)

            var that = this
            var node = document.getElementById('content');
            var intval = window.setInterval(function () {
                if (DingData.userid) {
                    that.getMenu()
                    clearInterval(intval)
                }
            },200)
            this.getUserInfo()
            loadHtml("mainPage", "partPage")
        }
    })
</script>
