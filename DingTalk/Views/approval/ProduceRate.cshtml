@{
    Layout = null;
}

<!--右侧实体内容-->
<el-main id="partPage" style="position:relative;">
    <!--标题-->
    <div class="head-fixed" onclick="loadPage('/Main/approval')">
        <i class="el-icon-arrow-left"></i>
        {{ruleForm.Title}}
    </div>
    <el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="120px" class="demo-ruleForm" :inline="true">
        <!--表格實體-->
        <el-table :data="tableData" stripe border
                  style="width: 100%">
            <el-table-column prop="CodeNo" type="index"></el-table-column>
            <el-table-column prop="Column1" width="150" label="单位"></el-table-column>
            <el-table-column prop="Column2" width="150" label="大类别"></el-table-column>
            <el-table-column prop="Column3" width="150" label="小类别"></el-table-column>
            <el-table-column prop="Column4" width="150" label="项目编码"></el-table-column>
            <el-table-column prop="Column5" width="150" label="项目名称"></el-table-column>
            <el-table-column prop="Column6" width="150" label="流水号"></el-table-column>
            <el-table-column prop="Column7" width="150" label="bom"></el-table-column>
            <el-table-column prop="Column8" width="150" label="走账"></el-table-column>
            <el-table-column prop="Column9" width="150" label="单位"></el-table-column>
            <el-table-column prop="Column10" width="150" label="单位"></el-table-column>
            <el-table-column label="配送信息">
                <el-table-column prop="name"
                                 label="姓名"
                                 width="120">
                </el-table-column>
                <el-table-column prop="name" label="地址" width="120">

                </el-table-column>
            </el-table-column>
        </el-table>
        <el-table :data="tableData" stripe border>
            <el-table-column prop="CodeNo" type="index"></el-table-column>
            @*<el-table-column label="操作">
                <template slot-scope="scope">
                    <el-button size="mini" type="danger" v-on:click="deleteGood(scope.$index, scope.row)">删除</el-button>
                </template>
            </el-table-column>*@

            <el-table-column v-for="(value,key) in allConfig" v-if="needInput.indexOf(key) >=0" :prop="key" :label="value" :key="key" :style="{width:lengthConfig[key]+'px'}">
                <template slot-scope="scope">
                    <el-input v-model="scope.row[key]" :class="{redborder:!scope.row[key]}"></el-input>
                </template>
            </el-table-column>
            <el-table-column v-for="(value,key) in allConfig" v-if="needInput.indexOf(key) <0" :prop="key" :label="value" :key="key" :style="{width:lengthConfig[key]+'px'}">
                <template slot-scope="scope">
                    <el-input v-model="scope.row[key]"></el-input>
                </template>
            </el-table-column>
        </el-table>
        <!--上传表單-->
        <el-upload class="upload-demo"
                   action="/drawingupload/UploadAndGetInfo"
                   :on-success="handleSuccess"
                   :before-upload="beforeExcelUpload"
                   multiple
                   :limit="1"
                   :file-list="excelList">
            <el-button size="small" type="primary">上传excel</el-button>
            <div slot="tip" class="el-upload__tip">只能上传excel文件，且不超过500kb</div>
        </el-upload>
        <el-button size="mini" type="primary" v-on:click="downloadFile(mediaId)" :disabled="disablePage">下载模板</el-button>
        <hr />

    </el-form>
</el-main>

<script>
    var meterielConfig = {
        Name: '物料名称',
        Unit: '单位',
        Standard: '规格型号',
        SurfaceTreatment: '表面处理',
        PerformanceLevel: '性能等级',
        StandardNumber: '标准号',
        Features: '典型特征',
        purpose: '用途',
        Remark: '备注'
    }
    var allConfig = _cloneObj(meterielConfig)
    var configDictionary = {}
    allConfig['BigCodeName'] = '大类名称'
    allConfig['BigCode'] = '大类编码'
    allConfig['SmallCodeName'] = '小类名称'
    allConfig['SmallCode'] = '小类编码'
    for (let c in allConfig) {
        configDictionary[allConfig[c]] = c
    }
    var meteriel = {}
    var lengthConfig = {}
    for (let m in meterielConfig) {
        meteriel[m] = ''
        switch (m) {
            case 'Unit': case 'BigCode': case 'SmallCode': case 'PerformanceLevel': case 'Features': lengthConfig[m] = 100; break;
            default: lengthConfig[m] = '';
        }
    }
    var demo = new Vue({
        el: "#partPage",
        mixins: [mixin],
        data: function () {
            return {
                mediaId: '@@lAvPDeC2t8bqmM3OExReeM5jC3b9',
                excelList: [],
                tableData: [],
                allConfig: allConfig,
                lengthConfig: lengthConfig,
                meterielConfig: meterielConfig,
                meteriel: meteriel,
                needInput: ['BigCode', 'SmallCode', 'BigCodeName', 'SmallCodeName', 'Name', 'Standard', 'Unit', 'Remark'],
                ruleForm: {
                    name: DingData.nickName,
                    goods: [_cloneObj(meteriel)]
                }
            }
        },
        methods: {
            onSubmit(formName) {
                console.error(this.tableData)
                if (this.tableData.length == 0) {
                    this.addGoods()
                    if (this.tableData.length == 0) {
                        this.elementAlert('提示信息', '未添加编码')
                        return
                    }
                }
                for (var i = 0; i < this.tableData.length;i++) {
                    let d = this.tableData[i]
                    if (!d.BigCode || !d.BigCode || !d.Name || !d.Standard || !d.BigCodeName || !d.SmallCodeName) {
                        this.elementAlert('提示信息', '第 ' + (i+1) + ' 表单未填写完整')
                        return
                    }
                }
                this.approvalSubmit(formName, {
                    Title: this.ruleForm.Title,
                    Remark: this.ruleForm.remark
                }, this.bindAll)
            },
            bindAll(taskId) {
                var that = this
                var paramArr = []
                for (let p of this.tableData) {
                    p.TaskId = taskId
                    paramArr.push(p)
                }
                //console.log(JSON.stringify(paramArr))
                $.ajax({
                    url: '/ItemCodeAdd/TableSave',
                    contentType: 'application/json; charset=utf-8',
                    type: 'POST',
                    dataType: "json",
                    data: JSON.stringify(paramArr),
                    success: function (data) {
                        console.log(data)
                        var alertStr = '物料编码审批提交成功'
                        if (data.errorCode != 0) alertStr = data.errorMessage
                        that.doneSubmit(alertStr)
                    }
                })
            },

            //上传文件方法
            handleSuccess(response, file, fileList) {
                //this.tableData = []
                console.log(response)
                this.tableData = []
                for (let d of response[0].Value) {
                    let tmpData = {}
                    for (let s in d) {
                        tmpData[configDictionary[s]] = d[s]
                    }
                    this.tableData.push(tmpData)
                }
            },
        },
        created: function () {
            loadHtml("mainPage", "partPage")
        }
    })

</script>
